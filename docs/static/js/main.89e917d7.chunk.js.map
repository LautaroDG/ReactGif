{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","imagen","console","log","className","src","alt","tite","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","cat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAgB5C,OACI,sBAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBQ,SAAAP,GAChBF,EAAcE,EAAEQ,OAAOF,a,uBCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEKI,MAAOF,GAFZ,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAEnB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE1B,OADAC,QAAQC,IAAIF,EAAOd,KAEf,sBAAKiB,UAAU,0BAAf,UACI,qBAAKC,IAAKJ,EAAOd,IAAKmB,IAAKL,EAAOM,OAClC,4BAAIN,EAAOJ,YCJVW,EAAU,SAAC,GAAgB,IAAfvB,EAAc,EAAdA,SAAc,ECCX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLiB,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WAEN5B,EAAQC,GACH4B,MAAM,SAAAC,GACHH,EAAS,CACLnB,KAAMsB,EACNL,SAAQ,SAGrB,CAACxB,IAGGyB,EDhBwBK,CAAa9B,GAAhCa,EAHuB,EAG5BN,KAAaiB,EAHe,EAGfA,QAKpB,OACI,qCACI,6BAAKxB,IACJwB,GAAW,2CACZ,qBAAKL,UAAU,YAAf,SAGQN,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,CACIM,OAAQN,GACHA,EAAIC,aEjBxBoB,EAAe,WAAM,MAIM7C,mBAAS,IAJf,mBAIvB8C,EAJuB,KAIX/C,EAJW,KAa9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEK+C,EAAWvB,KAAK,SAAAwB,GAAG,OAChB,cAAC,EAAD,CACIjC,SAAUiC,GACLA,YChBdC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.89e917d7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const inputChange = e => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const presionarEnter = e => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={presionarEnter}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={inputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ABc9Gfa6Axj2HQ9kR6LULGGntWqMNiZE`;\r\n    const respuesta = await fetch( url ); //Devuelve promesa\r\n    const {data} = await respuesta.json(); \r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n\r\n        }\r\n    })\r\n    return gifs;//Devuelve promesa\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ imagen }) => {\r\n    console.log(imagen.url);\r\n    return (\r\n        <div className=\"card animate__bounceOut\" >\r\n            <img src={imagen.url} alt={imagen.tite}></img>\r\n            <p>{imagen.title}</p>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n  \r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            imagen={img}\r\n                            key={img.id} \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({   \r\n        data:[],\r\n        loading:true,\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading:false,\r\n                })\r\n            });\r\n    }, [category])\r\n    \r\n\r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //const categories = [\"nombre1\",\"nombre2\",\"nombre3\"];\r\n\r\n    const [categories, setCategories] = useState([])\r\n\r\n\r\n    //const handleAdd = () => {\r\n        //setCategories([...categories,\"Aglgo\"])\r\n    //    setCategories(cats => [...cats,\"Nombre4\"])\r\n        //Las dos formas sirven, se le pasa como par√°etro a setCategories \r\n        //por defecto el valor inicial del useState\r\n    //}\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                 categories.map( cat => (\r\n                    <GifGrid \r\n                        category={cat} \r\n                        key={cat}\r\n                    />\r\n                 ))   \r\n                }\r\n            </ol>\r\n\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\n //<button onClick={handleAdd}>Agregar</button>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}